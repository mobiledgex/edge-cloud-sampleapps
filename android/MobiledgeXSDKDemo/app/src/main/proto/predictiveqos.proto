/* dtag.qos.predictive
 *
 * This is the protobuf/grpc protocol description of the API between the
 * MNO/SCM backend and the DT Data Analytics Engine for the
 * Predictive QoS system.
 */

syntax = "proto3";

// parameters for code generation
option java_multiple_files = true;
option java_package = "dt.qos.predictive";
option java_outer_classname = "QQoS";

package queryqos;

service QueryQoS
{
    rpc QueryQoSKPI(QoSKPIRequest) returns (stream QoSKPIResponse) {}
}

// Represents a request sent by the client, contains the ID of the request
// and the list of the grids in question, together with the timestamp for
// which the KPIs will be predicted
message QoSKPIRequest
{
    // set by the client (the Unix timestamp when the initial
    // request was in the client, in microseconds) and the
    // server attaches it to each response
    int64 requestid = 1;
    // the list of the position-timestamp pairs requested
    repeated PositionKpiRequest requests = 2;
}


// Represents a response object which contains the calculated
// KPIs at the given grid (represented with
// lat/long coordinates) at the given timestamp.
// A QoSKPIResponse contains a list of this result object
message PositionKpiResult
{
    // as set by the client, must be unique within one QoSKPIRequest
    int64 positionid = 1;


    oneof a_oneof1 {
        float dluserthroughput_min = 2;
    }
    oneof a_oneof2 {
        float dluserthroughput_avg = 3;
    }
    oneof a_oneof3 {
        float dluserthroughput_max = 4;
    }
    oneof a_oneof4 {
        float uluserthroughput_min = 5;
    }
    oneof a_oneof5 {
        float uluserthroughput_avg = 6;
    }
    oneof a_oneof6 {
        float uluserthroughput_max = 7;
    }
    oneof a_oneof7 {
        float latency_min = 8;
    }
    oneof a_oneof8 {
        float latency_avg = 9;
    }
    oneof a_oneof9 {
        float latency_max = 10;
    }
}

// Represents a request which queries the KPIs at the given grid
// (represented with lat/long coordinates) at the given timestamp.
// The QoSKPIRequest contains a
// list of this objects
message PositionKpiRequest
{
    // as set by the client, must be unique within one QoSKPIRequest

    int64 positionid = 1;
    // as decimal degree, i.e.: 48.1855141 , 11.5613505
    // in wsg84 coordinate system
    // minus number represent south / west coordinate
    float latitude = 2;
    float longitude = 3;
    // UNIX timestamp for which the prediction has to be calculated
    // se when the vehicle is due at the given position, in secs
    int64 timestamp = 5;
    // in meter, above ground level
    // (ignored in the calculations during the Pilot phase - added here only for completness)
    float altitude =  6;
}

// Represents a response to QoSKPIRequest. Contains the ID of the request
// (which was set by the client with the initial request), and the list of the
// KPI results for each requested object. This response is sent periodically
// by the server as a server stream.
// The positions with the already passed timestamps are omitted from the

// renewal responses, and when all of the timestamps are passed, the server
// closes the stream for this request
message QoSKPIResponse
{
    // set by the client (the Unix timestamp when the initial
    // request was in the client, in microseconds) and the
    // server attaches it to each response
    int64 requestid = 1;
    repeated PositionKpiResult results = 2;
}


//----------------------------------------------------------------------------//
// Simple health status service
service Health
{
    rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}

// The request sent by the client.
// Optionally it can contain the name of the service the client is interested
// in, currently for this system it can be only QueryQoS
message HealthCheckRequest
{
    string service = 1;
}


// The response to the above message. The NOT_SERVING"
// response represents an internal error condition of the system, when the
// API frontend is up (hence can answer the health request), but cannot
// provide actual results
message HealthCheckResponse
{
    enum ServingStatus {
        UNKNOWN = 0;
        SERVING = 1;
        NOT_SERVING = 2;
    }
    ServingStatus status = 1;
    // similar to http status codes, attach it to error reports
    int32 errorcode = 2;
    // prediction model version that is used for calculating the response
    string modelversion = 3;
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'

android {
    archivesBaseName = "MobiledgeXSDKDemo"
    compileSdkVersion 31
    defaultConfig {
        applicationId "com.mobiledgex.sdkdemo"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode 69
        versionName "1.1.25"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [GOOGLE_MAPS_API_KEY: "${googleMapsApiKey}"]
        buildConfigField "String", "GOOGLE_DIRECTIONS_API_KEY", "\"${googleDirectionsApiKey}\""
        buildConfigField "String", "DT_QOS_SESSIONS_API_KEY", "\"${dtQosSessionsApiKey}\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
    }

}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1-1'
    }
    plugins {
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc {
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'com.google.android.gms:play-services-auth:19.0.0'
    // For Google Location Services.
    implementation 'com.google.android.gms:play-services-maps:17.0.1'
    implementation 'com.google.maps.android:android-maps-utils:0.5+'
    implementation 'com.google.maps:google-maps-services:0.9.0'
    implementation 'org.slf4j:slf4j-nop:1.7.25'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation "com.mobiledgex:matchingengine:${matchingengineVersion}"
    implementation "io.grpc:grpc-okhttp:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf-lite:${grpcVersion}"
    implementation 'fr.bmartel:jspeedtest:1.32.1'
    implementation 'com.android.volley:volley:1.2.0'
    // Required for local unit tests (JUnit 4 framework)
    implementation 'javax.annotation:javax.annotation-api:1.2'
    implementation project(path: ':computervision')
    implementation project(path: ':matchingenginehelper')
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

}

// Generate the RELEASE variant app, to get App level third party disclosures, then convert to text file (same as for App Display)
task generateThirdPartyLicensesTxt {
    dependsOn "generateReleaseAssets"
    // Convert the generated output metadata into a single text file:
    def currDir = System.getProperty("user.dir");
    printf("CurrentDir: %s\n", currDir)
    def licensesFile = new File(currDir + "/app/build/generated/third_party_licenses/release/res/raw/third_party_licenses")
    def licensesMetadataFile = new File(currDir + "/app/build/generated/third_party_licenses/release/res/raw/third_party_license_metadata")
    if (!licensesFile.canRead() || licensesFile.length() == 0) {
        printf("Can't read release license file: [%s]!\n", licensesFile)
        return
    }
    if (!licensesMetadataFile.canRead() || licensesMetadataFile.length() == 0) {
        printf("Can't read release license metadata file [%s]!\n", licensesMetadataFile)
        return
    }

    def licFileReader = new java.io.RandomAccessFile(licensesFile, "r")
    File thirdPartyLicensesTextFile = new File("THIRD_PARTY_LICENSES.txt")

    def licenseWriter = new FileWriter(thirdPartyLicensesTextFile, false) // overwrite mode.

    def lines = licensesMetadataFile.readLines()
    def licenseSeparator = "================================================================================"
    lines.each { String line ->
        {
            printf("line: %s\n", line)
            String []data = line.split(" ", 2)
            String []licLocation = data[0].split(":", 2)

            def packageString = data[1]
            printf("package: %s\n", packageString)

            def offset = Long.parseLong(licLocation[0])
            printf("Offset seek: %d\n", offset)
            def licenseLength = Long.parseLong(licLocation[1])
            printf("Length of lic text: %d\n", licenseLength)

            // ASCII files, according to "FILE"
            licFileReader.seek(offset)
            byte []licText = new byte[licenseLength]
            licFileReader.read(licText, 0, (int)licenseLength)

            def packageOut = String.format("%s\nPackage: %s\n", licenseSeparator, packageString)
            def licenseTextOut = String.format("License:\n%s\n", new String(licText, "ASCII"))

            licenseWriter.write(packageOut)
            licenseWriter.write(licenseTextOut)
        }
    }
    licenseWriter.flush()
    licenseWriter.close()
    licFileReader.close()
}
